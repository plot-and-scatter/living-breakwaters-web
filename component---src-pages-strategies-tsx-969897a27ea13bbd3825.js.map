{"version":3,"sources":["webpack:///./src/components/Strategies/StrategyCard.tsx","webpack:///./src/pages/strategies.tsx"],"names":["StrategyCard","strategy","strategyType","frontmatter","strategyTypes","color","colorForStrategy","className","to","fields","slug","style","title","excerpt","labelName","pageQuery","Strategies","props","data","strategies","allMarkdownRemark","edges","useState","filters","setFilters","filteredStrategies","filter","strategyNode","includes","node","checkboxCallback","useCallback","event","newFilters","value","target","checked","push","indexOfItem","indexOf","splice","useEffect","console","log","siteTitle","site","siteMetadata","Layout","location","SEO","map","key","type","id","onChange","defaultChecked","htmlFor","index"],"mappings":"4PAuCeA,G,UA5BM,SAAC,GAAqC,IAAnCC,EAAmC,EAAnCA,SAChBC,EAAeD,EAASE,YAAYC,cACpCC,EAAQC,EAAiBJ,GAC/B,OACE,yBAAKK,UAAS,4BAA8BF,GAC1C,yBAAKE,UAAS,yBAA2BF,GACvC,kBAAC,OAAD,CAAMG,GAAIP,EAASQ,OAAOC,KAAMC,MAAO,CAAEN,MAAO,UAC9C,wBAAIE,UAAU,QAAQN,EAASE,YAAYS,OAC3C,wBAAIL,UAAU,QACZ,+BAAQL,MAId,yBAAKK,UAAU,aACb,2BAAIN,EAASE,YAAYU,SACzB,uBAAGN,UAAU,mBACX,kBAAC,OAAD,CACEC,GAAIP,EAASQ,OAAOC,KACpBH,UAAS,0BAA4BF,GAFvC,qB,weCbH,IAAMD,EAAgB,CAAC,UAAW,eAE5BE,EAAmB,SAACQ,GAC/B,OAAQA,GACN,IAAK,UACH,MAAO,UACT,IAAK,cACH,MAAO,UACT,QACE,MAAO,cAyFAC,GAPEC,UA9EI,SAACC,GAAuB,IACjCC,EAASD,EAATC,KAEFC,EAAaD,EAAKE,kBAAkBC,MAHD,EAKXC,mBAAQ,UAAqBlB,IAApDmB,EALkC,KAKzBC,EALyB,KAOnCC,EAAqBN,EAAWO,QAAO,SAACC,GAAD,OAC3CJ,EAAQK,SAASD,EAAaE,KAAK1B,YAAYC,kBAG3C0B,EAAmBC,uBACvB,SAACC,GACC,IAAMC,EAAa,EAAIV,GACjBW,EAAQF,EAAMG,OAAOD,MAC3B,GAAIF,EAAMG,OAAOC,QACfH,EAAWI,KAAKH,OACX,CACL,IAAMI,EAAcL,EAAWM,QAAQL,GACvCD,EAAWO,OAAOF,EAAa,GAEjCd,EAAWS,KAEb,CAACV,IAGHkB,qBAAU,WACRC,QAAQC,IAAIpB,KACX,CAACA,IAEJ,IAAMqB,EAAY1B,EAAK2B,KAAKC,aAAalC,MACzC,OACE,kBAACmC,EAAA,EAAD,CAAQC,SAAU/B,EAAM+B,SAAUpC,MAAOgC,GACvC,kBAACK,EAAA,EAAD,CAAKrC,MAAM,eACX,yBAAKL,UAAU,+BACb,yBAAKA,UAAU,SACb,wBAAIA,UAAU,QAAd,eAEF,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,iDACb,wBAAIA,UAAU,wBAAd,oBACCH,EAAc8C,KAAI,SAAChD,GAClB,IAAMG,EAAQC,EAAiBJ,GAC/B,OACE,yBACEiD,IAAKjD,EACLK,UAAS,wDAA0DF,EAA1D,SAAwEA,GAEjF,2BACEE,UAAU,mBACV6C,KAAK,WACLC,GAAE,kBAAoBnD,EACtBgC,MAAOhC,EACPoD,SAAUxB,EACVyB,eAAgBhC,EAAQK,SAAS1B,KAEnC,2BACEK,UAAU,mBACViD,QAAO,kBAAoBtD,GAE1BA,UAQf,yBAAKK,UAAU,8BACZkB,EAAmByB,KAAI,SAACvB,EAAc8B,GACrC,IAAMxD,EAAW0B,EAAaE,KAC9B,OAAO,kBAAC,EAAD,CAAcsB,IAAKM,EAAOxD,SAAUA,UAc5B","file":"component---src-pages-strategies-tsx-969897a27ea13bbd3825.js","sourcesContent":["import { Link } from 'gatsby'\nimport React from 'react'\nimport { colorForStrategy } from '../../pages/strategies'\nimport { FixTypeLater } from '../Types/FixTypeLater'\n\nimport './StrategyCard.scss'\n\ninterface Props {\n  strategy: FixTypeLater\n}\n\nconst StrategyCard = ({ strategy }: Props): JSX.Element => {\n  const strategyType = strategy.frontmatter.strategyTypes\n  const color = colorForStrategy(strategyType)\n  return (\n    <div className={`StrategyCard card border-${color}`}>\n      <div className={`d-flex card-header bg-${color}`}>\n        <Link to={strategy.fields.slug} style={{ color: 'white' }}>\n          <h5 className=\"mb-0\">{strategy.frontmatter.title}</h5>\n          <h6 className=\"mb-0\">\n            <small>{strategyType}</small>\n          </h6>\n        </Link>\n      </div>\n      <div className=\"card-body\">\n        <p>{strategy.frontmatter.excerpt}</p>\n        <p className=\"mb-0 text-right\">\n          <Link\n            to={strategy.fields.slug}\n            className={`btn btn-sm btn-outline-${color}`}\n          >\n            Learn more &rarr;\n          </Link>\n        </p>\n      </div>\n    </div>\n  )\n}\n\nexport default StrategyCard\n","import { Link, graphql } from 'gatsby'\nimport PropTypes from 'prop-types'\nimport React, { useCallback, useEffect, useState } from 'react'\n\n// import BannerRow from '../components/Rows/BannerRow'\nimport Layout from '../components/Layout/Layout'\nimport SEO from '../components/SEO'\nimport StrategyCard from '../components/Strategies/StrategyCard'\nimport { FixTypeLater } from '../components/Types/FixTypeLater'\n\nimport './Strategies.scss'\n\n// import image from '../../content/assets/images/uta-scholl-pUD1P96NB9c-unsplash.jpg'\n\nexport const strategyTypes = ['Protect', 'Accommodate']\n\nexport const colorForStrategy = (labelName: string): string => {\n  switch (labelName) {\n    case 'Protect':\n      return 'primary'\n    case 'Accommodate':\n      return 'warning'\n    default:\n      return 'secondary'\n  }\n}\n\nconst Strategies = (props): JSX.Element => {\n  const { data } = props\n\n  const strategies = data.allMarkdownRemark.edges\n\n  const [filters, setFilters] = useState<FixTypeLater[]>([...strategyTypes])\n\n  const filteredStrategies = strategies.filter((strategyNode) =>\n    filters.includes(strategyNode.node.frontmatter.strategyTypes)\n  )\n\n  const checkboxCallback = useCallback(\n    (event) => {\n      const newFilters = [...filters]\n      const value = event.target.value\n      if (event.target.checked) {\n        newFilters.push(value)\n      } else {\n        const indexOfItem = newFilters.indexOf(value)\n        newFilters.splice(indexOfItem, 1)\n      }\n      setFilters(newFilters)\n    },\n    [filters]\n  )\n\n  useEffect(() => {\n    console.log(filters)\n  }, [filters])\n\n  const siteTitle = data.site.siteMetadata.title\n  return (\n    <Layout location={props.location} title={siteTitle}>\n      <SEO title=\"Strategies\" />\n      <div className=\"row my-4 align-items-center\">\n        <div className=\"col-6\">\n          <h1 className=\"mb-0\">Strategies</h1>\n        </div>\n        <div className=\"col-6 text-right\">\n          <div className=\"d-flex justify-content-end align-items-center\">\n            <h5 className=\"text-muted mr-3 mb-0\">Show strategies:</h5>\n            {strategyTypes.map((strategyType) => {\n              const color = colorForStrategy(strategyType)\n              return (\n                <div\n                  key={strategyType}\n                  className={`py-1 px-2 form-check form-check-inline border border-${color} text-${color}`}\n                >\n                  <input\n                    className=\"form-check-input\"\n                    type=\"checkbox\"\n                    id={`InlineCheckbox-${strategyType}`}\n                    value={strategyType}\n                    onChange={checkboxCallback}\n                    defaultChecked={filters.includes(strategyType)}\n                  />\n                  <label\n                    className=\"form-check-label\"\n                    htmlFor={`InlineCheckbox-${strategyType}`}\n                  >\n                    {strategyType}\n                  </label>\n                </div>\n              )\n            })}\n          </div>\n        </div>\n      </div>\n      <div className=\"StrategyCards card-columns\">\n        {filteredStrategies.map((strategyNode, index) => {\n          const strategy = strategyNode.node\n          return <StrategyCard key={index} strategy={strategy} />\n        })}\n      </div>\n    </Layout>\n  )\n}\n\nexport default Strategies\n\nStrategies.propTypes = {\n  data: PropTypes.object,\n  location: PropTypes.object\n}\n\nexport const pageQuery = graphql`\n  query {\n    allMarkdownRemark(\n      filter: { frontmatter: { contentType: { eq: \"strategy\" } } }\n      sort: { fields: [frontmatter___title], order: ASC }\n      limit: 1000\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            strategyTypes\n            title\n            excerpt\n          }\n        }\n      }\n    }\n    site {\n      siteMetadata {\n        title\n      }\n    }\n  }\n`\n"],"sourceRoot":""}