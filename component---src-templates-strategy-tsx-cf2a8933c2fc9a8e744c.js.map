{"version":3,"sources":["webpack:///./src/templates/Strategies.scss","webpack:///./src/components/Strategies/StrategyDetail/StrategyCitations.tsx","webpack:///./src/components/Strategies/StrategyDetail/StrategyHowItWorks.tsx","webpack:///./src/components/Strategies/StrategyDetail/StrategyItemList.tsx","webpack:///./src/components/Strategies/StrategyDetail/StrategyProjects.tsx","webpack:///./src/components/Strategies/StrategyDetail/StrategySummary.tsx","webpack:///./src/components/Strategies/StrategyDetail/StrategyDetail.tsx","webpack:///./src/templates/StrategyDropdown.tsx","webpack:///./src/templates/StrategySelect.tsx","webpack:///./src/templates/Strategy.tsx"],"names":["module","exports","StrategyCitations","citationHTML","className","dangerouslySetInnerHTML","__html","HowItWorks","images","useLayoutEffect","$","carousel","id","data-interval","sort","a","b","relativePath","localeCompare","map","_","index","key","data-target","data-slide-to","node","src","childImageSharp","fluid","href","role","data-slide","aria-hidden","StrategyItemList","iconName","listHTML","title","type","StrategyProjects","examples","exampleHtml","StrategySummary","strategyType","summaryHTML","StrategyDetail","data","pageContext","strategyTypes","markdownRemark","frontmatter","subpages","summary","allFile","nodes","types","toLowerCase","benefits","challenges","StrategyDropdown","active","label","strategies","colorClass","colorForStrategy","data-toggle","aria-haspopup","aria-expanded","s","fields","slug","to","StrategySelect","currentPost","Object","values","StrategyType","filteredStrategies","filter","Strategy","post","siteTitle","site","siteMetadata","Layout","SEO","description","excerpt","Header","Title","headingGroup","allMarkdownRemark","edges","html"],"mappings":"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","file":"component---src-templates-strategy-tsx-cf2a8933c2fc9a8e744c.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"brandBackground\":\"#142328\"};","import React from 'react'\n\nimport './StrategyCitations.scss'\n\ninterface Props {\n  citationHTML: string\n}\n\nconst StrategyCitations = ({ citationHTML }: Props): JSX.Element => {\n  return (\n    <div className=\"col Images\">\n      <h2>\n        <i className=\"fas fa-book mr-2 py-5\"></i> Citations\n      </h2>\n      <div dangerouslySetInnerHTML={{ __html: citationHTML }} />\n    </div>\n  )\n}\n\nexport default StrategyCitations\n","/* globals $ */\n\nimport React, { useLayoutEffect } from 'react'\n\nimport { StrategyGQLImageNode } from '../../../@types/StrategyGQL'\nimport IntentionalAny from '../../../@types/IntentionalAny'\n\nimport './StrategyHowItWorks.scss'\n\ninterface Props {\n  images: StrategyGQLImageNode[]\n}\n\nconst HowItWorks = ({ images }: Props): JSX.Element => {\n  useLayoutEffect(() => {\n    ;($('#carouselExampleFade') as IntentionalAny).carousel()\n  }, [])\n\n  return (\n    <div className=\"Illustration HowItWorks col-8\">\n      <h2>How it works</h2>\n\n      <div\n        id=\"carouselExampleFade\"\n        className=\"carousel slide carousel-fade\"\n        // data-ride=\"carousel\"\n        data-interval={2000}\n      >\n        <ol className=\"carousel-indicators\">\n          {images\n            .sort((a, b) => a.relativePath.localeCompare(b.relativePath))\n            .map((_, index) => {\n              // console.log('_', _)\n              return (\n                <li\n                  key={index}\n                  data-target=\"#carouselExampleFade\"\n                  data-slide-to={index}\n                ></li>\n              )\n            })}\n        </ol>\n        <div className=\"carousel-inner\">\n          {images.map((node, index) => {\n            return (\n              <div\n                key={index}\n                className={`carousel-item ${index === 0 ? ' active' : ''}`}\n              >\n                <img\n                  className=\"d-block w-100\"\n                  src={node.childImageSharp.fluid.src}\n                />\n              </div>\n            )\n          })}\n        </div>\n        <a\n          className=\"carousel-control-prev\"\n          href=\"#carouselExampleFade\"\n          role=\"button\"\n          data-slide=\"prev\"\n        >\n          <span\n            className=\"carousel-control-prev-icon\"\n            aria-hidden=\"true\"\n          ></span>\n          <span className=\"sr-only\">Previous</span>\n        </a>\n        <a\n          className=\"carousel-control-next\"\n          href=\"#carouselExampleFade\"\n          role=\"button\"\n          data-slide=\"next\"\n        >\n          <span\n            className=\"carousel-control-next-icon\"\n            aria-hidden=\"true\"\n          ></span>\n          <span className=\"sr-only\">Next</span>\n        </a>\n      </div>\n    </div>\n  )\n}\n\nexport default HowItWorks\n","import React from 'react'\nimport FixTypeLater from '../../../@types/FixTypeLater'\n\ninterface Props {\n  iconName?: string\n  listHTML: FixTypeLater\n  title: string\n  type: string\n}\n\nconst StrategyItemList = ({\n  iconName,\n  listHTML,\n  title,\n  type\n}: Props): JSX.Element => {\n  return (\n    <div className={`col col-4 ${type}`}>\n      <h2>\n        {iconName && <i className={`fas fa-${iconName} mr-2`} />}\n        {title}\n      </h2>\n      <div\n        dangerouslySetInnerHTML={{\n          __html: listHTML\n        }}\n      />\n    </div>\n  )\n}\n\nexport default StrategyItemList\n","import React from 'react'\n\ninterface Props {\n  examples: string[]\n}\n\nconst StrategyProjects = ({ examples }: Props): JSX.Element => {\n  return (\n    <div className=\"Examples pb-4 row\">\n      <div className=\"ExamplesTitle col-12\">\n        <h2>\n          <i className=\"fas fa-tools mr-2 py-4\"></i> Example projects\n        </h2>\n      </div>\n\n      {examples &&\n        examples.map((exampleHtml, index) => {\n          return (\n            <div className=\"col\" key={index}>\n              <div\n                className=\"Example\"\n                dangerouslySetInnerHTML={{ __html: exampleHtml }}\n              />\n            </div>\n          )\n        })}\n    </div>\n  )\n}\n\nexport default StrategyProjects\n","import React from 'react'\n\nimport './StrategySummary.scss'\n\ninterface Props {\n  strategyType: string\n  summaryHTML: string\n}\n\nconst StrategySummary = ({ strategyType, summaryHTML }: Props): JSX.Element => {\n  return (\n    <div className={`StrategySummary col col-4 ${strategyType}BG`}>\n      <div dangerouslySetInnerHTML={{ __html: summaryHTML }} />\n    </div>\n  )\n}\n\nexport default StrategySummary\n","import React from 'react'\n\nimport { StrategyMainPageGQL } from '../../../@types/StrategyGQL'\nimport { StrategyPageContext } from '../../../@types/StrategyPageContext'\nimport StrategyCitations from './StrategyCitations'\nimport StrategyHowItWorks from './StrategyHowItWorks'\nimport StrategyItemList from './StrategyItemList'\nimport StrategyProjects from './StrategyProjects'\nimport StrategySummary from './StrategySummary'\n\ninterface Props {\n  citationHTML: string\n  data: StrategyMainPageGQL\n  pageContext: StrategyPageContext\n}\n\nconst StrategyDetail = ({\n  citationHTML,\n  data,\n  pageContext\n}: Props): JSX.Element => {\n  const strategyTypes = data.markdownRemark.frontmatter.strategyTypes\n\n  return (\n    <div className=\"Post\">\n      <div className=\"row MoreInfo\">\n        <StrategySummary\n          strategyType={strategyTypes}\n          summaryHTML={pageContext.subpages.summary}\n        />\n        <StrategyHowItWorks images={data.allFile.nodes} />\n        <StrategyItemList\n          listHTML={pageContext.subpages.types}\n          title={`Types of ${data.markdownRemark.frontmatter.title.toLowerCase()}`}\n          type={'Types'}\n        />\n        <StrategyItemList\n          iconName={'check'}\n          listHTML={pageContext.subpages.benefits}\n          title={'Benefits'}\n          type={'Benefits'}\n        />\n        <StrategyItemList\n          iconName={'times'}\n          listHTML={pageContext.subpages.challenges}\n          title={'Challenges'}\n          type={'Challenges'}\n        />\n      </div>\n      <div className=\"BottomBG\">\n        <StrategyProjects examples={pageContext.subpages.examples} />\n      </div>\n      <div className=\"row BottomBG\">\n        <StrategyCitations citationHTML={citationHTML} />\n      </div>\n    </div>\n  )\n}\n\nexport default StrategyDetail\n","import { Link } from 'gatsby'\nimport React from 'react'\n\nimport { colorForStrategy } from '../pages/strategies'\nimport { StrategyGQLEdge } from '../@types/StrategyGQL'\nimport { StrategyType } from '../@types/StrategyType'\n\ninterface Props {\n  active?: boolean\n  label: StrategyType\n  strategies: StrategyGQLEdge[]\n}\n\nconst StrategyDropdown = ({\n  active,\n  label,\n  strategies\n}: Props): JSX.Element => {\n  const colorClass = active ? colorForStrategy(label) : 'secondary'\n\n  return (\n    <div className=\"btn-group\">\n      <button\n        type=\"button\"\n        className={`btn btn-${colorClass} dropdown-toggle ml-3`}\n        data-toggle=\"dropdown\"\n        aria-haspopup=\"true\"\n        aria-expanded=\"false\"\n      >\n        {label}\n      </button>\n      <div className=\"dropdown-menu dropdown-menu-right\">\n        {strategies.map((s) => (\n          <Link\n            key={s.node.fields.slug}\n            className=\"dropdown-item\"\n            to={s.node.fields.slug}\n          >\n            {s.node.frontmatter.title}\n          </Link>\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default StrategyDropdown\n","import React from 'react'\n\nimport { StrategyGQLEdge, StrategyGQLNode } from '../@types/StrategyGQL'\nimport { StrategyType } from '../@types/StrategyType'\nimport StrategyDropdown from './StrategyDropdown'\n\nimport './StrategySelect.scss'\n\ninterface Props {\n  currentPost: StrategyGQLNode\n  strategies: StrategyGQLEdge[]\n}\n\n{\n  /* <li className=\"nav-item dropdown\">\n<a\n  className=\"nav-link dropdown-toggle\"\n  href=\"#\"\n  id=\"navbarDropdownMenuLink\"\n  data-toggle=\"dropdown\"\n  aria-haspopup=\"true\"\n  aria-expanded=\"false\"\n>\n  Case Studies\n</a> */\n}\n\nconst StrategySelect = ({ currentPost, strategies }: Props): JSX.Element => (\n  <div className=\"text-right\">\n    {Object.values(StrategyType).map((strategyType, index) => {\n      const filteredStrategies = strategies.filter(\n        (s) => s.node.frontmatter.strategyTypes === strategyType\n      )\n      return (\n        <StrategyDropdown\n          active={currentPost.frontmatter.strategyTypes === strategyType}\n          key={index}\n          label={strategyType}\n          strategies={filteredStrategies}\n        />\n      )\n    })}\n  </div>\n)\n\nexport default StrategySelect\n","import { graphql } from 'gatsby'\nimport React from 'react'\n\nimport { StrategyMainPageGQL } from '../@types/StrategyGQL'\nimport { StrategyPageContext } from '../@types/StrategyPageContext'\nimport Header from '../components/Layout/Header'\nimport Layout from '../components/Layout/Layout'\nimport SEO from '../components/SEO'\nimport SitePageProps from '../@types/SitePageProps'\nimport StrategyDetail from '../components/Strategies/StrategyDetail/StrategyDetail'\nimport StrategySelect from './StrategySelect'\nimport Title from '../components/Layout/Title'\n\nimport './Strategies.scss'\n\nconst Strategy = ({\n  data,\n  pageContext\n}: SitePageProps<StrategyMainPageGQL, StrategyPageContext>): JSX.Element => {\n  const post = data.markdownRemark\n  const siteTitle = data.site.siteMetadata.title\n\n  return (\n    <Layout title={siteTitle}>\n      <SEO\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n      />\n      <Header>\n        <Title\n          headingGroup={'Adaptation Strategy'}\n          title={post.frontmatter.title}\n        />\n        <div className=\"col-6\">\n          <StrategySelect\n            currentPost={post}\n            strategies={data.allMarkdownRemark.edges}\n          />\n        </div>\n      </Header>\n      <div className=\"Strategies\">\n        <StrategyDetail\n          data={data}\n          pageContext={pageContext}\n          citationHTML={post.html}\n        />\n      </div>\n    </Layout>\n  )\n}\n\nexport default Strategy\n\nexport const pageQuery = graphql`\n  query StrategyBySlug($slug: String!, $animationSlug: String!) {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allFile(filter: { absolutePath: { regex: $animationSlug } }) {\n      nodes {\n        absolutePath\n        relativePath\n        childImageSharp {\n          fluid(maxWidth: 2000) {\n            src\n          }\n        }\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      excerpt(pruneLength: 160)\n      html\n      id\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        strategyTypes\n        title\n      }\n    }\n    allMarkdownRemark(\n      filter: { frontmatter: { contentType: { eq: \"strategy\" } } }\n      sort: { fields: [frontmatter___title], order: ASC }\n      limit: 1000\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            strategyTypes\n            title\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}